Small features:

* Improve exit bracket handling: (aliasify)
 - Make sure there are no duplicate exit aliases in a room.
 - Add --stripbrackets option to mimic old --nobrackets behavior.
 - Add --autobracket option to add brackets to exits that don't have them.
   If given, possible, and no <b>rackets, bracket based on first given alias.

* Add STARTING-IN command
 - STARTING-IN specifies that the room the user is standing in is X
 - (also considering a STARTING-ON, but you can't be -IN- an exit.)

* Make MuGraph handle same-named rooms in different ATTR_BASEs.
 - This may just be a "builder beware" scenario.
 - Lookup rooms based on [nil,name], iff duplicates then on [attr_base,name]

* Complete "IN" and "ON" parsing
 - Might not be possible due to MPP, in which case I scrap MPP.

* Make a way to make parents and add code to room parents
 - CREATE THING "Name" command might work.

* Implement exit name tagging
 - This is probably a bad idea, since exits are used by typing their names.
 - Figure out how to get the DBRef # of opened exits.
 - @listen may be the best option.
 - Making an exit's @id ROOM_ID~EXIT_ID may be helpful.


Big features:

* No-@teleport building.
 - Add a depth-first search to the graph and walk in while building instead
   of teleporting around everywhere
 - In command-style, may require fancy @dig operations. Might be impossible?

* Denser modern PennMUSH building output / sidefx
 - New PennMUSH will let you build remotely.
 - @set me=ATTR_BASE.ID:[dig()], instead of @teleporting around.

* Add partial grid constructions
 - Let the user define a number of DBrefs for prebuilt rooms and exits.
 - Probably by :BUILT_ROOM <id> <dbref> and :BUILT_EXIT <id> <dbref> opcodes.
 - Maybe also :BUILT_THING <id> <dbref> for room/exit parents.

* Check @quota before building begins.
 - How do we kill the rest of the building commands after a check!?

* Add frontends to print out building for MOOs/MUDs

* Add macroing system
 - This probably isn't necessary if you have a good editor.
 - INCLUDE command, handled recursively in process_file. Easy, but worthless?
 - MACRO "name" and CALL "name" commands, with $vars (like $current_room)?

* Implement a test suite
 - I have a number of files I used for testing, but no coded pass/fail system

 
FEATURE CREEP:
* Improve ChatChart
 - Arrows for which direction the exits go
 - Unicode 8-way arrays for hockey-stick drawing mode
 - Graph rigidity for N/S/E/W exits.

From old quickbuild:
* Add the ability to read daVinci files so we can draw room layouts using
  graphical tools!
